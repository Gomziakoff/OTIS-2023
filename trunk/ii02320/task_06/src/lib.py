import difflib


class KnowledgeBase:
    def __init__(self):
        self.facts = {
            "Запуск в режиме эмуляции": "Запуск в режиме эмуляции позволяет эмулировать работу системы на компьютере.",
            "Клонирование проекта": "Клонирование проекта позволяет получить копию исходного кода и настроек проекта.",
            "Visual Studio Code": "Visual Studio Code - интегрированная среда разработки, используемая для разработки программного обеспечения.",
            "Git LFS": "Git LFS (Large File Storage) - расширение Git для работы с большими файлами.",
            "DbEditorXML": "DbEditorXML - инструмент для редактирования XML-файлов с данными.",
            "EasyServer": "EasyServer - программное обеспечение для создания и настройки сервера.",
            "Monitor": "Monitor - инструмент для мониторинга и отладки процессов.",
            "Проверка текущей версии прошивки через веб-браузер": "Если контроллер имеет установленную прошивку, можно проверить ее текущую версию через веб-браузер.",
            "Обновление прошивки через веб-браузер": "Если необходимо обновить прошивку контроллера, можно использовать веб-браузер.",
            "Обновление прошивки контроллера через командную оболочку": "Если необходимо обновить прошивку контроллера, можно использовать командную оболочку.",
            "Создание проекта PLCnext Engineer": "Для создания проекта в среде PLCnext Engineer используйте соответствующие инструменты.",
            "Работа с проектом в среде PLCnext Engineer": "При работе с проектом в среде PLCnext Engineer можно использовать различные функции и инструменты.",
            "Задание сетевых настроек контроллера": "Для настройки сетевых параметров контроллера используйте соответствующие настройки.",
            "Подключение к контроллеру в программе PLCnext Engineer": "Для подключения к контроллеру в программе PLCnext Engineer используйте функцию подключения.",
            "Обновление библиотеки": "Для обновления библиотеки в проекте используйте соответствующие инструменты.",
            "Копирование Lua-файлов проекта": "Для копирования Lua-файлов проекта используйте соответствующие команды или инструменты.",
            "Включение суперпользователя": "Для включения суперпользователя выполните соответствующие действия.",
            "Активация входа по SSH в качестве пользователя root": "Для активации входа по SSH в качестве пользователя root выполните соответствующие действия.",
            "Деактивация входа по SSH в качестве пользователя root": "Для деактивации входа по SSH в качестве пользователя root выполните соответствующие действия.",
            "Чтение логов": "Для чтения логов используйте соответствующие команды или инструменты.",
            "Запуск проекта": "Для запуска проекта используйте соответствующие команды или инструменты.",
            "Управление ходом выполнения проекта": "Для управления ходом выполнения проекта используйте соответствующие командыили инструменты."
        }

    def get_answer(self, question):
        # Преобразуем вопрос в нижний регистр и удаляем знаки препинания
        question = question.lower().strip("?.,!")

        # Поиск соответствующего факта в базе знаний
        if question in self.facts:
            return self.facts[question]
        else:
            # Поиск наиболее похожего вопроса в базе
            closest_match = difflib.get_close_matches(question, self.facts.keys(), n=1, cutoff=0.5)
            if closest_match:
                return self.facts[closest_match[0]]
            else:
                return "Извините, я не могу найти ответ на ваш вопрос."

# Создаем экземпляр класса KnowledgeBase
knowledge_base = KnowledgeBase()

# Пример использования модуля
while True:
    user_question = input("Задайте свой вопрос (для выхода введите 'exit'): ")

    if user_question.lower() == "exit":
        break

    answer = knowledge_base.get_answer(user_question)
    print(answer)